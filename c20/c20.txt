도전 1
길이가 4x4인 int형 2차원 배열을 선언하고, 모든 요소를 아래 그림의 왼쪽에 있는 형태와 동일하게 초기화하자.
그리고 배열의 요소들을 오른쪽 방향으로 90'씩 이동시켜서 그 결과를 출력하는 프로그램을 작성해보자.
참고로 배열이 변경되는 형태는 다음과 같다.
+------------------------------------------------------------------------------------------------+
|+-------------------+    +-------------------+    +-------------------+    +-------------------+|
||  1 |  2 |  3 |  4 |    | 13 |  9 |  5 |  1 |    | 16 | 15 | 14 | 13 |    |  4 |  8 | 12 | 16 ||
|+-------------------+    +-------------------+    +-------------------+    +-------------------+|
|+-------------------+    +-------------------+    +-------------------+    +-------------------+|
||  5 |  6 |  7 |  8 |    | 14 | 10 |  6 |  2 |    | 12 | 11 | 10 |  9 |    |  3 |  7 | 11 | 15 ||
|+-------------------+    +-------------------+    +-------------------+    +-------------------+|
|+-------------------+ -\ +-------------------+ -\ +-------------------+ -\ +-------------------+|
||  9 | 10 | 11 | 12 | -/ | 15 | 11 |  7 |  3 | -/ |  8 |  7 |  6 |  5 | -/ |  2 |  6 | 10 | 14 ||
|+-------------------+    +-------------------+    +-------------------+    +-------------------+|
|+-------------------+    +-------------------+    +-------------------+    +-------------------+|
|| 13 | 14 | 15 | 16 |    | 16 | 12 |  8 |  4 |    |  4 |  3 |  2 |  1 |    |  1 |  5 |  9 | 13 ||
|+-------------------+    +-------------------+    +-------------------+    +-------------------+|
+------------------------------------------------------------------------------------------------+

도전 2
달팽이 배열을 만들어서 이를 출력하는 프로그램을 작성하고자 한다.
여기서 말하는 달팽이 배열은 다음과 같다.
       4칸짜리
+-------------------+
|  1 |  2 |  3 |  4 |
+-------------------+
| 12 | 13 | 14 |  5 |
+-------------------+
| 11 | 16 | 15 |  6 |
+-------------------+
| 10 |  9 |  8 |  7 |
+-------------------+
         5칸짜리
+------------------------+
|  1 |  2 |  3 |  4 |  5 |
+------------------------+
| 16 | 17 | 18 | 19 |  6 |
+------------------------+
| 15 | 24 | 25 | 20 |  7 |
+------------------------+
| 14 | 23 | 22 | 21 |  8 |
+------------------------+
| 13 | 12 | 11 | 10 |  9 |
+------------------------+
프로그램 사용자로부터 n을 입력받아 n*n의 달팽이 배열을 출력하는 프로그램을 작성하자.

도전 3
프로그램을 구현하다 보면 난수(Random Number)를 발생시켜야 하는 경우가 종종 있다.
여기서 말하는 난수란 임의의, 정해지지 않은, 무엇이 될 지 모르는 수를 의미한다.
그런데 다행인 것은 ANSI 표준에서 난수를 생성할 때 호출할 수 있는 다음 함수를 제공하고 있다는 것이다.
#include <stdlib.h>
int rand(void); // 의사 난수(pseudo-random number)를 반환
rand의 사용방법은 다음과 같다.
/* randomnum.c */
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  int i;
  printf("난수의 범위: 0부터 %d까지\n, RAND_MAX);
  for(i = 0; i < 5; i++)
    printf("난수 출력: %d\n", rand());
  return 0;
}
이 예제를 적절히 변경하여 0 이상 99 이하의 난수를 총 5개 생성하는 프로그램을 작성해보자.

도전 4
도전 3에서 제시한 예제를 여러번 실행해보면 한가지 특징을 발견할 수 있다.
그것은 출력되는 난수가 규칙적이라는 것이다.
예를 들어서 처음 실행했을 때 생성된 난수가 21, 1, 43, 13, 2면 몇번을 실행해도 그 값이 그대로 출력이 된다.
그리고 이는 분명히 문제다!
왜냐하면 이렇게 되면 에측이 가능하기 때문에 진짜 난수라 할 수 없기 때문이다.
그래서 rand 함수가 반환하는 난수를 가리켜 '의사 난수(pseudo-random number)'라 하는 것이다.
의사 난수는 가짜 난수를 의미한다.
그래서 ANSI 표준에서는 이러한 문제를 어느 정도 해결할 수 있도록 srand라는 함수를 정의하였다.
#include <stdlib.h>
void srand(unsigned int seed); // 발생할 난수의 시드값 지정
위의 함수는 하나의 값을 전달받는다.
그리고 그 전달된 값은 난수를 생성하는데 필요한 씨앗으로 사용된다.
그래서 이 값을 가리켜 시드(seed)값이라 한다.
'콩 심은데 콩 나고, 팥 심은 데 팥 난다'라는 속담이 있듯이, 시드값이 무엇이냐에 따라서 rand함수가 반환하는 난수의 형태가 달라진다.
그럼 다음 예제를 통해 난수 생성에 필요한 씨앗을 심어보겠다.

/* seedrandomnum.c */
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  int seed, i;
  printf("Input seed:");
  scanf("%d", &seed);
  srand(seed);

  for(i = 0; i < 5; i++)
    printf("정수 출력 : %d\n", rand());
  return 0;
}
위 예제에서는 프로그램 사용자로부터 시드값을 입력받아 srand의 인자로 전달하고 있다.
즉, 사용자가 씨앗을 심은거다.
srand도 배웠으니 이제 제법 그럴듯한 난수를 발생시킬 수 있겠는가? 아니다. 여전히 문제는 남아있다.
위 예제처럼 프로그램을 실행할 때마다 시드값을 입력받을 수는 없는 노릇 아닌가.
설사 입력 받는다 해도 매번 다른 값을 입력받는다는 가정을 세우는건 무리가 있다.
그런데 이에 ㅎ대한 해결책이 하나 있다.
시스템 시간을 이요하는 것이다.
현재 여러분 컴퓨터의 시간값을 얻어와서 srand함수의 인자로 전달하는 것이다.
컴퓨터의 시간은 계속 변하기 때문에 매번 다른 씨앗을 얻는 도구로 활용이 가능핟.
그렇다면 커ㅁ퓨터의 현재시간을 어떻게 얻어와야 할까?
헤더파일 time.h에 선언되어 있는 time이라는 이름의 함수를 사용하면 된다.
이 함수는 컴퓨터의 현재시간과 1970년 1월 1일 이후의 시간적 차를 초단위로 계산해서 반환해 준다.
우리는 정확한 시간을 얻겠다는 것이 아니고, 프로그램 실행시마다 다른 정수 하나를 얻겠다는 것이므로 이정도면 충분하다.
그럼 이를 적용한 예제를 제시한다.
실제로 실행시마다 출력되는 난수가 다름을 확인할 수 잇을거다.

/* timeseedrandomnum.c */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main(void)
{
  int i;
  srand((int)time(NULL));
  for(i = 0; i < 5; i++)
    printf("정수 출력: %d\n", rand());
  return 0;
}

자, 이제 문제다.
두개의 주사위를 던졌을 때의 결과를 출력하는 프로그래믕ㄹ 작성해보자.
물론 그 결과는 예측이 불가능해야 한다.

실행의 예)
주사위 1의 결과 2
주사위 2의 결과 6

도전 5
가위바위보 게임을 반들어보자.
사용자로부터 가위바위보중에서 하나를 입력받는다.
그리고 컴퓨터는 난수 생성을 통해서 가위바위보중에서 하나를 선택하게 한다.
이 둘을 비교해서 승자와 패자를 가려주는 프로그램을 작성해보자.
다, 프로그램의 진행은 사용자가 질때까지 계속되어야 하고, 마지막에 가서는 게임의 결과(예: 4승 3무)까지 출력해 주도록 하자.

실행의 예)
바위는 1, 가위는 2, 보는 3: 2
당신은 가위 선택, 컴퓨터는 가위 선택, 비겼습니다!
바위는 1, 가위는 2, 보는 3: 1
당신은 바위 선택, 컴퓨터는 바위 선택, 비겼습니다!
바위는 1, 가위는 2, 보는 3: 3
당신은 보 선택, 컴퓨터는 보 선택, 비겼습니다!
바위는 1, 가위는 2, 보는 3: 3
단신은 보 선택, 컴퓨터는 가위 선택, 당신이 졌습니다!

게임의 결과: 0승, 3무

도전 6
친구와 둘이서 숫자맞추기 게임을 해본적이 있을거다(보통은 야구게임으로 불린다)
이것을 컴퓨터와 할 수 있도록 프로그램을 작성해보자.
게임의 방식은 다음과 같다.
컴퓨터는 0에서 9사이의 숫자 중에서 서로 다른 세개의 숫자를 고르고, 사용자는 이것을 맞춰야 한다.
중요한 것은 숫자의 순서까지 정확히 맞춰야 한다는 것이다.
단, 사용자가 예상한 숫자를 입력할 때마다 컴퓨터는 입력된 숫자와 컴퓨터 자신이 생각한 숫자가 얼마나 비슷한지를 알려줘야 한다.
예를 들어서 컴퓨터가 고른 숫자가 1 4 9고, 사용자가 입력한 숫자가 4 0 9면 두개의 숫자 4와 9가 일치한다.
9는 숫자의 위치까지 일치하지만(1 strike), 4는 숫자만 일치한다(1 ball)
이런 경우 컴퓨터는 다음과 같은 메세지를 출력해준다.
1strike, 1ball

만약에 사용자가 1 4 9 를 입력하였다면 "3 strike, 0 ball"이 되면서 프로그램은 종료가 된다.
이때 몇번만에 3strike를 얻어냈는지에 대해서도 출력해주기로 하자(진행하면서 x번째 도전입니다. 라는 메세지를 출력해줘도 좋다.

실행의 예)
Start Game!
3개의 숫자 선택: 1 2 8
1번째 도전 결과: 1strike, 1ball!
3개의 숫자 선택: 3 0 8
2번째 도전 결과k: 2strike, 0ball!
3개의 숫자 선택: 2 0 8
3번째 도전 결과: 3strike, 0ball!

Game Over!

