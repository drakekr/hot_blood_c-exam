도전 1
길이가 10인 배열을 선언하고 총 10개의 정수를 입력받아서, 홀수와 짝수를 구분지어 출력하는 프로그램을 작성해보자.
일단 홀수부터 출력하고 나서 짝수를 출력하도록 하자.
단, 10개의 정수는 main 함수 내에서 입력 받도록 하고, 배열 내에 존재하는 홀수만 출력하는 함수와, 배열 내에 존재하는 짝수만 출력하는 함수를 각각 정의해서 이 두 함수를 호출하는 방식으로 프로그램을 완성하자.
실행의 예)
총 10개의 숫자 입력
입력: 1
입력: 2
입력: 3
입력: 4
입력: 5
입력: 6
입력: 7
입력: 8
입력: 9
입력: 0
홀수 출력: 1, 3, 5, 7, 9
짝수 출력: 2, 4, 6, 8, 0

도전 2
프로그램 사용자로부터 10진수 형태로 정수를 하나 입력받은 다음, 이를 2진수로 변환해서 출력하는 프로그램을 작성해 보자.
실행의 예)
10진수 정수 입력: 12
1100
도전 2의 해결을 위한 Guide)
10진수를 2진수로 변환하는 방법을 모른다면, 먼저 그 방법부터 공부해야 한다.
그런데 대부분의 경우 변환 방법을 모르는 것이 아니라, 중학교 시절에 공부한 내용이라서 잘 기억이 나지 않는 것이다.

도전 3
길이가 10인 배열을 선언하고 총 10개의 정수를 입력받는다.
단, 입력받은 숫자가 홀수이면 배열의 앞에서부터 채워나가고, 짝수이면 뒤에서부터 채워나가는 형식을 취하기로 하자.
따라서 사용자가 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]을 입력했다면, 배열에는 [1, 3, 5, 7, 9, 10, 8, 6, 4, 2]의 순으로 저장이 되어야 한다.
실행의 예
총 10개의 숫자 입력
입력: 1
입력: 1
입력: 4
입력: 4
입력: 4
입력: 4
입력: 3
입력: 3
입력: 2
입력: 2
배열 요소의 출력 : 1 1 3 3 2 2 4 4 4 4

도전 4
회문(Palindrome)은 앞으로 읽으나 뒤로 읽으나 차이가 없는 단어들을 뜻한다.
예를 들어서 level, bob과 같은 단어들은 회문에 속한다.
이에 우리는 인자로 전달되는 영단어가 회문인지 아닌지를 판단해서 그 결과를 출력하는 기능의 함수를 정의하고, 이에 적절한 main 함수를 정의해보고자 한다.
단 구현의 편의를 위해서 대소문자까지 일치해야 회문으로 인정하기로 하겠다(이는 어디까지나 구현의 편의를 위한 제약사항일 뿐이다)
실행의 예)
문자열 입력: noon
회문 입니다.
도전 4의 해결읠 위한 Guide)
입력된 문자열의 길이를 알아야 회문인지 아닌지를 판단할 수 있다.
따라서 문제의 해결을 위해서는 문자열의 길이를 계산해서 반환하는 함수도 정의해야 한다.
참고로 이러한 기능의 함수가 표준함수로 존재한다.
헤더파일 string.h에 선언되어 있는 strlen이라는 이름의 함수이다.
이 함수에 대해서는 Chapter 21에서 소개한다.

도전 5
이번에는 정렬 알고리즘을 하나 소개하고, 이것을 이용한 프로그래밍 문제를 제시하고자 한다. 정렬이란 정의된 순서에 의해서 대상을 재배치하는것을 의미한다. 예를 들어서 길이가 5인 배열에 정수 4, 3, 5, 1, 2가 저장되어 있다고 가정해보자. 이것을 오름차순(ascending order)로 정렬하면 1, 2, 3, 4, 5로 재배치될 것이고, 내림차순(descending order)으로 정열하면 순서가 5, 4, 3, 2, 1로ㅓ 재배치될 것이다. 정렬에 대한 기본적인 개념은 누구나 가지고 있으므로 정렬에 대한 개념적인 소개는 이쯤에서 끝내기로 하겠다.
정렬 알고리즘은 그 수가 다양하다. 그런데 여기서는 가장 쉬운 버블 정렬(bubble sort) 알고리즘을 소개하고자 한다. 버블 정렬이라는 이름은 정렬되는 과정이 마치 거품이 일어나는 모습과 유사하다고 해서 붙여진 이름이다. 그럼 그림을 통해서 버블 정렬의 기본 원를 설명하겠다.
배열
+---------------+
| 3 | 2 | 4 | 1 |
+---------------+ < 그림 : 배열에 저장된 정렬의 대상
위 그림의 배열에 저장된 데이터를 오름찻훈으로 정렬한다고 했을 때, 첫번째로 해야 할일은 가장 큰 값을 배열의 마지막으로 보내는 일이다. 이를 위해서 다음과 같은 순서의 연산을 진행하면 된다. 맨 앞에서부터 비교하여 가장 큰 값을 뒤로 밀어내는 작업이다.
0번째, 1번째 비교 - 3이 2보다 크니까 스왑
+--스왑---------+
| 2 | 3 | 4 | 1 |
+---------------+
1번째, 2번째 비교 - 3이 4보다 작으니까 냅둠
+---------------+
| 2 | 3 | 4 | 1 |
+---------------+
2번째, 3번째 비교 - 4가 1보다 크니까 스왑
+----------스왑-+
| 2 | 3 | 1 |*4 |
+---------------+
결과는 가장 큰 수는 항상 맨 마지막에 위치된다.
이제 그 다음 큰 수를 n-1에 위치하도록 루프를 똑같이 돌린다.
+---------------+
| 2 | 3 | 1 |*4 |
+---------------+
0번째, 1번째 비교 - 2는 3보다 작으니까 냅둠
+---------------+
| 2 | 3 | 1 |*4 |
+---------------+
1번째, 2번째 비교 - 3은 1보다 크니까 스왑
+---------------+
| 2 | 1 |*3 |*4 |
+---------------+
2번째, 3번째는 픽스됐고, 0번째, 1번째 비교
0번째, 1번째 비교 - 2는 1보다 크니까 스왑 
+---------------+
| 1 |*2 |*3 |*4 |
+---------------+
자. 정렬 완료.
이걸 구현해봅시다.
