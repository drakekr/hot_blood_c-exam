도전 1
간단한 도서 관리용 프로그램을 작성해보자.
[제목, 저자명, 페이지수]에 대한 정보를 저장하는 구조로 작성해보자.
main함수에서는 사용자로부터 3권의 도서에 대한 정보를 입력받고, 입력이 끝나면 도서에 대한 내용을 출력해주도록 하자.

실행의 예)
도서 정보 입력
저자: Yoon
제목: C Programming
페이지 수: 200
저자: Hong
제목: C++ Programming
페이지 수: 250
저자: James
제목: OS for Programmer
페이지 수: 300

도서 정보 출력
book 1
저자: Yoon
제목: C Programming
페이지 수: 200
book 2
저자: Hong
제목: C++ Programming
페이지 수: 250
book 3
저자: James
제목: OS for Programmer
페이지 수: 300

도전 2
도전 1에서 구현한 프로그램에 변경을 조금 가하자.
구조체 배열을 선언하는것이 아니라, 구조체 포인터배열을 선언하고, 구조체 변수를 동적으로 할당하는 형태로 프로그램을 재구현해보자.
즉, 프로그램의 형태가 다음과 같이 변경되어야 한다.
+-------------------------------------+
|  구조체                  동적할당된 |
|  포인터배열              구조체변수 |
| +--------+               +--------+ |
| | +----+ |               | +----+ | |
| | |    |------------------>|    | | |
| | +----+ |               | +----+ | |
| | +----+ |               | +----+ | |
| | |    |------------------>|    | | |
| | +----+ |               | +----+ | |
| | +----+ |               | +----+ | |
| | |    |------------------>|    | | |
| | +----+ |               | +----+ | |
| +--------+               +--------+ |
+-------------------------------------+

도전 3
복소수(complex number)를 나타내는 구조체를 정의하고, 복소수의 덧셈과 곱셈을 위한 함수를 각각 정의하자.
그리고 이를 기반으로 프로그램 사용자로부터 두개의 복소수 정보를 입력받아 두 복소수의 덧셈과 곱셈의 결과를 출력하는 프로그램을 작성하자.

실행의 예)
복소수 입력1[실수 허수]: 1.2 2.4
복소수 입력2[실수 허수]: 1.1 2.2
합의 결과] 실수: 2.3000000, 허수: 4.6000000
곱의 결과] 실수: -3.9600000, 허수: 5.2800000

도전 3의 해결을 위한 guide
복소수의 덧셈공식: (a + bi) + (c + di) = (a + c) + (b + d)i
복소수의 곱셈공식: (a + bi) x ( c+ di) = ac - bd + bci + adi

도전 4
문자열을 저장하고 있는 파일을 열어서 A와 P로 시작하는 단어의 수를 세어서 출력하는 프로그램을 작성해보자. 단, 모든 단어는 공백문자(스페이스바, \t, \n)에 의해서 구분된다고 가정한다.
실행의 예
실행파일의 이름이 wordcnt.exe이고 대상파일의 이름이 text.txt인 경우의 실행의 예
C:\>wordcnt text.txt
A로 시작하는 단어의 수: 4
P로 시작하는 단어의 수: 3
도전4 문제해결을 위한 guide
이번 문제의 구현방법은 참으로 다양하다.
그런데 어떠한 방법을 쓰건, 기본적으로 공백문자를 기준으로 단어들을 뽑아내야 한다.
참고로 이 상황에서 fscanf함수의 사용도 고려해볼만하다.
scanf함수와 fscanf함수는 공백을 기준으로 문자열을 구분하기 때문이다.

도전 5
두개의 텍스트파일이 같은지 다른지를 확인하는 프로그램을 작성해보자.
단순히 공백문자 하나가 차이를 보여도 두 텍스트파일은 다른것으로 판별이 나야 한다.

실행의 예
다음은 실행파일의 이름이 comp.exe이고 비교의 대상이 되는 두 파일의 이름이 각각 d1.txt와 d2.txt인 경우의 실행의 예이다.
C:\test>comp d1.txt d2.txt
두개의 파일은 완전히 일치합니다.

도전 6
전화번호 관리 프로그램을 작성해보자.
이 프로그램이 기본적으로 지녀야 하는 기능은 다음과 같다.
* 입력 - 이름과 전화번호의 입력
* 삭제 - 이름을 입력하여 해당 이름의 정보 삭제
* 검색 - 이름을 입력하여 해당 이름의 정보 출력
* 전체출력 - 저장된 모든 이름과 전화번호 정보를 출력

실행의 예)
**** Menu ****
1. Insert
2. Delete
3. Search
4. Print All
5. Exit
Choose the item: 1
[ INSERT ]
Input Name: Yoon
Input Tel Number: 333-4444
  Data Inserted

**** Menu ****
1. Insert
2. Delete
3. Search
4. Print All
5. Exit
Choose the Item: 1
[ INSERT ]
Input Name: Hong
Input Tel Nuimber: 555-5555
  Data Inserted

**** Menu ****
1. Insert
2. Delete
3. Search
4. Print All
5. Exit
Chosse the item: 4
[ Print All Data ]
Name: Yoon  Tel: 333-4444
Name: Hong  Tel: 555-5555

도전 7
도전 6에서 구현한 프로그램의 문제점은 프로그램이 종료되고 나면 기존에 저장된 데이터가 전부 사라진다는 것이다.
이 문제점을 해결하자.
프로그램이 종료되기 전에 파일을 하나 생성해서 ㅅ기존에 입력받은 데이터를 저장하고, 프로그램을 다시 실행하면 파일에 저장된 데이터를 읽어들이는 방식으로 프로그램을 변경해보자.
참고로 도전 6과 도전 7은 이 책의 모든 내용을 마무리하는 문제이다.
이 문제를 해결할 수 있다면 여러분은 탄탄한 기본기를 갖추었다고 자부해도 좋다.
